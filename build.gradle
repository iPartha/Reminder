// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext {
        kotlin_version = "1.3.72"
        buildConfig = [
                'compileSdk': 30,
                'minSdk'    : 26,
                'targetSdk' : 30,
                'tools'     : '30.0.1',
                'version'   : [
                        'code': 1,
                        'name': "0.1"
                ],
                'id'        : 'com.know.reminder'
        ]
        versions = [
                'gradle'               : '7.0.0',
                'appcompat'            : '1.2.0',
                'recyclerview'         : '1.1.0',
                'cardview'             : '1.0.0',
                'constraintlayout'     : '1.1.3',
                'core_ktx'             : '1.3.1',
                'kotlin'               : '1.4.0',
                'kotlinCoroutines'     : '1.3.9',
                'lifecycle'            : '2.2.0',
                'dagger'               : '2.28.3',
                'retrofit'             : '2.9.0',
                'kotlinx_serialization': '1.0.0-RC',
                'map'                  : '17.0.1',
                'location'             : '18.0.0',
                'interceptor'           : '4.2.1',

        ]
        deps = [
                'androidx' : [
                        appcompat       : "androidx.appcompat:appcompat:${versions.appcompat}",
                        cardview        : "androidx.cardview:cardview:${versions.cardview}",
                        constraintlayout: "androidx.constraintlayout:constraintlayout:${versions.constraintlayout}",
                        core_ktx        : "androidx.core:core-ktx:${versions.core_ktx}",
                        recyclerview    : "androidx.recyclerview:recyclerview:${versions.recyclerview}",
                        viewModel       : "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycle}",
                        liveData        : "androidx.lifecycle:lifecycle-livedata-ktx:${versions.lifecycle}",

                ],
                'googleplay' : [
                        map      : "com.google.android.gms:play-services-maps:${versions.map}",
                        location: "com.google.android.gms:play-services-location:${versions.location}",
                ],
                'jetbrains': [
                        stdlib               : "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlin}",
                        coroutines_core      : "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlinCoroutines}",
                        coroutines_android   : "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.kotlinCoroutines}",
                        kotlinx_serialization: "org.jetbrains.kotlinx:kotlinx-serialization-core:${versions.kotlinx_serialization}",
                ],
                'dagger'   : [
                        common  : "com.google.dagger:dagger:${versions.dagger}",
                        compiler: "com.google.dagger:dagger-compiler:${versions.dagger}",
                ],
                'squareup' : [
                        retrofit      : "com.squareup.retrofit2:retrofit:${versions.retrofit}",
                        converter_gson: "com.squareup.retrofit2:converter-gson:${versions.retrofit}",
                        logging_interceptor: "com.squareup.okhttp3:logging-interceptor:${versions.interceptor}",
                ],
                'material_component': "com.google.android.material:material:${versions.appcompat}"
        ]


        appModules = [
                'data'  : ":data",
                'domain': ":domain"
        ]

    }
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${versions.gradle}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath "com.google.android.libraries.mapsplatform.secrets-gradle-plugin:secrets-gradle-plugin:2.0.0"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}